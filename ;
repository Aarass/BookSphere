import { useAppDispatch } from "@/app/hooks";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { useForm } from "react-hook-form";
import { useNavigate } from "react-router";
import { AuthorAutocomplete } from "../authors/AuthorAutocomplete";
import { useState } from "react";

export function CreateBook() {
  const {
    register,
    handleSubmit,
    control,
    getFieldState,
    getValues,
    formState: { errors },
  } = useForm();

  const [, setToggle] = useState(false);
  const forceRerender = () => setToggle((t) => !t);

  const dispatch = useAppDispatch();
  const navigate = useNavigate();

  // export interface CreateBookDto {
  //   isbn: string;
  //   title: string;
  //   description: string;
  //   imageUrl: string;
  //   authorId: string;
  //   genreIds: string[];
  // }

  // const linkState = getFieldState("link");
  const linkValue = getValues("link");

  return (
    <form
      onSubmit={handleSubmit(async (data) => {
        console.log(data);
      })}
    >
      <div className="flex flex-col gap-2">
        <Dialog onOpenChange={forceRerender}>
          <DialogTrigger asChild>
            <div>
              <label>
                <img
                  className="w-3xs outline-1 rounded-2xl"
                  src={
                    linkValue
                      ? linkValue
                      : "https://upload.wikimedia.org/wikipedia/commons/thumb/9/9e/Plus_symbol.svg/1707px-Plus_symbol.svg.png"
                  }
                />
              </label>
              <Button variant="outline" hidden></Button>
            </div>
          </DialogTrigger>
          <DialogContent className="sm:max-w-md">
            <DialogHeader>
              <DialogTitle>Cover Image URL</DialogTitle>
              <DialogDescription>
                Paste url of the cover image
              </DialogDescription>
            </DialogHeader>
            <div className="flex items-center gap-2">
              <div className="grid flex-1 gap-2">
                <div className="flex gap-2">
                  <Input
                    {...register("link", { required: true })}
                    placeholder="URL"
                  />

                  <DialogClose asChild>
                    <Button type="button" variant="secondary">
                      Ok
                    </Button>
                  </DialogClose>
                </div>
              </div>
            </div>
          </DialogContent>
        </Dialog>

        <>
          <Label htmlFor="title">Title</Label>
          <Input
            {...register("title", { required: true })}
            id="title"
            placeholder="Title"
          />
          {errors["title"] && (
            <p className="text-xs text-red-700">Tittle is required.</p>
          )}
        </>

        <>
          <Label htmlFor="isbn">ISBN</Label>
          <Input
            {...register("isbn", { required: true })}
            id="isbn"
            placeholder="ISBN"
          />
          {errors["isbn"] && (
            <p className="text-xs text-red-700">ISBN is required.</p>
          )}
        </>

        <>
          <Label htmlFor="description">Description</Label>
          <Input
            {...register("description", { required: true })}
            id="description"
            placeholder="Description"
          />
          {errors["description"] && (
            <p className="text-xs text-red-700">Description is required.</p>
          )}
        </>

        <>
          <Label htmlFor="author">Author</Label>
          <AuthorAutocomplete control={control} name="author" />
          {errors.author && (
            <p className="text-xs text-red-700">Author is required.</p>
          )}
        </>

        <>
          <Label htmlFor="genre">Genre</Label>
          <AuthorAutocomplete control={control} name="genre" />
          {errors.genre && (
            <p className="text-xs text-red-700">Genre is required.</p>
          )}
        </>

        {
          null
          // <>
          //   <Label htmlFor="img">Image url</Label>
          //   <Input
          //     {...register("img", { required: true })}
          //     id="img"
          //     placeholder="Image url"
          //   />
          //   {errors["img"] && (
          //     <p className="text-xs text-red-700">Imgage url is required.</p>
          //   )}
          // </>
        }

        <Button type="submit">Create</Button>
      </div>
    </form>
  );
}
